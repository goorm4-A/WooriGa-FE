package com.example.wooriga

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.launch

class MoodViewModel : ViewModel() {

    // ÎÇ¥Î∂ÄÏóêÏÑú ÏàòÏ†ï Í∞ÄÎä•Ìïú MutableLiveData
    private val _moodList = MutableLiveData<List<Mood>>()
    val moodList: LiveData<List<Mood>> = _moodList // Ïô∏Î∂ÄÏóê ÎÖ∏Ï∂úÎêòÎäî Í±¥ ÏùΩÍ∏∞ Ï†ÑÏö©

    fun loadFamilyMoods(familyId: Long) {
        viewModelScope.launch {
            try {
                val response = RetrofitClient.moodApi.getFamilyMoods(familyId)
                if (response.isSuccess) {
                    val moods = response.result.map { moodRes ->
                        Mood(
                            id = moodRes.id,
                            familyId = familyId,
                            moodType = moodRes.moodType,
                            tags = moodRes.tags
                        )
                    }
                    _moodList.value = moods

                    // ÏÑ±Í≥µ Î°úÍ∑∏
                    println("MoodViewModel: Î∂ÑÏúÑÍ∏∞ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ ÏÑ±Í≥µ (${moods.size}Í∞ú)")
                } else {
                    // Ïã§Ìå® Î°úÍ∑∏
                    println("MoodViewModel: ÏÑúÎ≤Ñ Ïò§Î•ò - ${response.code}, ${response.message}")
                }
            } catch (e: Exception) {
                e.printStackTrace()
                println("MoodViewModel: ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò - ${e.message}")
            }
        }
    }

    // Î∂ÑÏúÑÍ∏∞ Îì±Î°ù
    fun postMood(familyId: Long, moodType: String, tags: List<String>, onSuccess: () -> Unit, onFailure: () -> Unit) {
        viewModelScope.launch {
            try {
                val tagString = tags.joinToString(",") { "#$it" }

                // Ïó¨Í∏∞Ïóê ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏ Ï∂îÍ∞Ä
                println("üî• moodType: $moodType")
                println("üî• tagString: $tagString")


                val request = MoodRequest(tags = tagString, moodType = moodType)

                val response = RetrofitClient.moodApi.postFamilyMood(familyId, request)
                if (response.isSuccess) {
                    println("MoodViewModel: Î∂ÑÏúÑÍ∏∞ Îì±Î°ù ÏÑ±Í≥µ ‚Üí ID: ${response.result.id}")
                    onSuccess()

                    // Îì±Î°ù ÌõÑ Î™©Î°ù Í∞±Ïã†
                    loadFamilyMoods(familyId)
                } else {
                    println("MoodViewModel: Îì±Î°ù Ïã§Ìå® ‚Üí ${response.code}, ${response.message}")
                    onFailure()
                }
            } catch (e: Exception) {
                e.printStackTrace()
                onFailure()
            }
        }
    }

    // Î∂ÑÏúÑÍ∏∞ ÏÇ≠Ï†ú
    fun deleteMood(familyId: Long, moodId: Long, onSuccess: () -> Unit, onFailure: () -> Unit) {
        viewModelScope.launch {
            try {
                val response = RetrofitClient.moodApi.deleteMood(familyId, moodId)
                if (response.isSuccess) {
                    println("MoodViewModel: Î∂ÑÏúÑÍ∏∞ ÏÇ≠Ï†ú ÏÑ±Í≥µ ‚Üí ID: $moodId")
                    onSuccess()
                    loadFamilyMoods(familyId) // Î™©Î°ù Í∞±Ïã†
                } else {
                    println("MoodViewModel: ÏÇ≠Ï†ú Ïã§Ìå® ‚Üí ${response.code}, ${response.message}")
                    onFailure()
                }
            } catch (e: Exception) {
                e.printStackTrace()
                onFailure()
            }
        }
    }


}
